#!/usr/bin/expect -f
set timeout 40
#spawn ./ta-test
#send -- "he\n";
source config.expect
set potion_start 0
set potion_status "expired"
set nomonster 1
set monster ""
set mino_elapsed 0
set mino_time 0
set exit_when_lost 1
if { !([info exists make_deposits]) } { set make_deposits true }
if { !([info exists debug]) } { set debug false }
if { !([info exists mino_interval]) } { set mino_interval 480 }
if { !([info exists griffon_interval]) } { set griffon_interval 480 }
set lastdestination ""
array set universal_timer {}
array set universal_timer_elapsed {}
array set learned_travel {}
array set monster_damage { minotaur 25 griffon 90 "mountain lion" 50 "lizard woman" 20 "skeleton warrior" 20 "cave bear" 20}
set stats("experience") [list]
source destinations.expect
set x 999
set y 999
set z 999
if { $debug == "true" } {
	set CR "\n"
} else {
	set CR "\r\n"
}

proc start_timer { secs } {
        puts "Starting timer for $secs seconds"
        set then [ clock seconds ]
        set now $then
        set diff [expr $now - $then]
        while {$diff < $secs } {
                set now [clock seconds];
                set diff [expr $now - $then]
        }
}

proc potion_timer { action } {
	global potion_start
	global potion_status
	if { $potion_start == "" } { set potion_start 0 }
	if { $action == "start" || $action == "restart" } {
		set potion_start [ clock seconds ]
		set potion_status "ongoing"		
	} else {
		set now [clock seconds]
		set diff [expr $now - $potion_start]
		if { $diff > 800 } {
			set potion_status "expired"
		}
	}
}

proc timer { type sec } {
	global universal_timer
	global universal_timer_elapsed
	set universal_timer($type) $sec
	set now [ clock seconds ]
	if {![info exists universal_timer_elapsed($type)]} {
		set universal_timer_elapsed($type) $now
		return $sec
	} else {
		set then $universal_timer_elapsed($type)
		set now [ clock seconds ]
		set elapsed [ expr $now - $then ]
		if { $elapsed >= $universal_timer($type) } {
			set universal_timer_elapsed($type) $now
			return 0
		} else {
			return [expr $sec - $elapsed]
		}
	}
	return 0
}

proc connect {} {
	global env
	global spawn_id
	global username
	global password
	global server
	global port
	global CR
	spawn telnet $server $port
	set count 0
	set timeout 15
	expect {
		"User-ID" {
			if { $count > 0 } {
				start_timer 2
			}
			send -- "$username$CR"; 
			incr count 1; 
			exp_continue
		}
                "identify" { send -h "$username$CR"; exp_continue }
                "access code" { send -h "$password$CR"; exp_continue }
                "Login" { send -h "$username$CR"; exp_continue }
                "assword" { send -h "$password$CR"; exp_continue }
                "Press ENTER to continue)" { send -h "$CR"; exp_continue }
                "ontinue" { send -h "$CR"; exp_continue }
                "Multi-User Games" { send -h "G$CR"; exp_continue }
                "T,C,E,A,P,R,I,G,O,L,F,V" { send -h "$CR"; exp_continue }
                "Trivia Top Ten" { send -- "$CR"; exp_continue }
                "1,2,3,4,5,7,8,9,0,B,C,D,E,F,G,H,I,J,L,M,N,O" { send -h "3$CR"; }
                -re {2,T,A,F,M,S,L,H,R,O,N,I,K.*X to exit} { send -h "a$CR"; }
                "(N)onstop" { send -h "$CR"; exp_continue }
                "/GO KEYS" { send -h "/go ta$CR" }
                "H,G,C,L" { send -h "/go ta$CR" }
                "(C)ontinue" { send -h "$CR"; exp_continue }
                "G,T,F,I,D,L,M,A,O,Q,S" { send -- "G$CR"; exp_continue }
		timeout {
			puts "Problem connecting.  Take over manually please."
			interact {
				timeout 10 { return }
				resume { return }
			}
		}
	}
}

proc connect_test {} {
	global spawn_id
	spawn ./ta-test
}


proc disconnect {} {
	close
	exit
}

proc whereami {} {
	global location
	global x
	global y
	global z
	global CR
	set location ""
	puts "--Coordinates: $x $y $z; Getting location\n"
	set count 0
	send "$CR"
	expect {
		-re {You(\'re| are) (in|inside|outside) (a|the) ([a-z ]*)\.} {
			if { !($location == [list $x $y $z]) } {
				set location $expect_out(4,string)
			}
		}
		timeout { close }
	} 
	set coordinates [location_to_coordinates $location]
	if { [info exists coordinates] && !($coordinates == "") } {
		set x [lindex $coordinates 0]
		set y [lindex $coordinates 1]
		set z [lindex $coordinates 2]
	}	
	puts "--Location: $location\n"
	return $location
}

proc get_monsters {} {
        global monster;
        global nomonster;
	global CR
	expect *
        puts "Checking for monsters";
        send "$CR";
	global location;
	set count 0
	set timeout 10
        expect {
		-re {You(?:\'re| are) (?:in|inside|outside) (?:a|the) ([a-z  ]*)\..*\n?There (?:is|are) (a|an|two|three|four) ([a-z]+[a-rt-z]+)s?,? [, a-z]*here\.} {
                        set location $expect_out(1,string)
			if { $location == "temple" || $location == "tavern" || $location == "guild hall" || $location == "town vaults" || $location == "magic shop" } { set nomonster 1; return }
                        set monster [list $expect_out(3,string)]
                        set nomonster 0;
                        puts "Found $expect_out(2,string) $monster!"
			if { $expect_out(2,string) == "a" || $expect_out(2,string) == "an" } { 
				set count 1 
			} elseif { $expect_out(2,string) == "two" } { set count 2 
			} elseif { $expect_out(2,string) == "three" } { set count 3 
			} elseif { $expect_out(2,string) == "four" } { set count 4 
			} else { set count 0
			}
                }
                "nobody" {
                        set nomonster 1;
                }
		-re {(?:[A-za-z0-9 ]*) (?:is|are) here\.} { set nomonster 1; puts "People found, but no monsters found."; return 0;}
		timeout { close }
        }
        puts "Monster:$monster; nomonster:$nomonster\n";
	return $count
}

proc reverse_route { directions } {
        set directions [lreverse $directions]
	set newdirections [list]
	set size [llength $directions]
        for { set i 0 } { $i < $size } { incr i 1 } {
		set direction [lindex $directions $i]
                if { $direction == "e" } { lappend newdirections "w" }
                if { $direction == "w" } { lappend newdirections "e" }
                if { $direction == "n" } { lappend newdirections "s" }
                if { $direction == "s" } { lappend newdirections "n" }
                if { $direction == "ne" } { lappend newdirections "sw" }
                if { $direction == "se" } { lappend newdirections "nw" }
                if { $direction == "nw" } { lappend newdirections "se" }
                if { $direction == "sw" } { lappend newdirections "ne" }
		if { $direction == "d" } { lappend newdirections "u" }
		if { $direction == "u" } { lappend newdirections "d" }
        }
        return $newdirections
}

proc update_coordinates { direction } {
	global x
	global y
	global z
	if { $direction == "e" } { set x [expr $x + 1] }
	if { $direction == "w" } { set x [expr $x - 1] }
	if { $direction == "n" } { set y [expr $y + 1] }
	if { $direction == "s" } { set y [expr $y - 1] }
	if { $direction == "ne" } { set x [expr $x + 1]; set y [expr $y + 1] }
	if { $direction == "sw" } { set x [expr $x - 1]; set y [expr $y - 1] }
	if { $direction == "nw" } { set x [expr $x - 1]; set y [expr $y + 1] }
	if { $direction == "se" } { set x [expr $x + 1]; set y [expr $y - 1] }
	if { $direction == "d" } { set z [expr $z - 1] }
	if { $direction == "u" } { set z [expr $z + 1] }
}

proc update_learned_travel { step lastcoordinates } {
	global x y z learned_travel
	puts "Attempt to update travel.  Step: $step, Last coordinates $lastcoordinates"
	if { [llength [get_route $lastcoordinates [list 0 0 0]]] > 0 } { set learned_travel($lastcoordinates) [get_route $lastcoordinates [list 0 0 0]]}
	if { [llength [get_route [list $x $y $z] [list 0 0 0]]] > 0 } { set learned_travel([list $x $y $z]) [get_route [list $x $y $z] [list 0 0 0]] }
	if { !([info exists learned_travel([list $x $y $z])]) && ([info exists learned_travel($lastcoordinates)] || [llength [get_route $lastcoordinates [list 0 0 0]]] > 0)} {
		puts "Inside if.  Let's see what we find."
		if { [ info exists learned_travel($lastcoordinates) ] } {
			set newroute $learned_travel($lastcoordinates)
		} elseif { !([get_route $lastcoordinates [list 0 0 0]] == [list]) } {
			set newroute [get_route $lastcoordinates]
		}
		if { $lastcoordinates == [list 0 0 0] } { set newroute [list] }
		if { !($lastcoordinates == [list $x $y $z]) && !([list $x $y $z] == [list 0 0 0])} {
			lappend newroute $step
			set learned_travel([list $x $y $z]) $newroute
			puts "Learned New Route ($x,$y,$z) = $newroute"
		}
	}
	if { [info exists learned_travel([list $x $y $z])] } {
		puts "Learned route ($x,$y,$z) = $learned_travel([list $x $y $z])"
	}
}

proc move { journey {fasttrack 0} {to ""} } {
	global location
	global lastdestination
	global monster
	global nomonster
	global attacks_per_round
	global x
	global y
	global z
	global learned_travel
	global CR
	global exit_when_lost
	set myjourney [list]

	if { $journey == [list] } { return }
	set from [list $x $y $z]
	set lastcoordinates $from	
	
	set size [llength $journey]
	set i 0
	set track_travel 0

	while { $i < $size } {
		set direction [lindex $journey $i]
		if { $direction == 0 } { puts "Invalid Direction (0).  Ignoring."; return 0 }
		# We assume that if we take a step toward a direction we haven't yet explored, that it's outbound
		set step [expr $i + 1]
		start_timer 1
		send -- "$direction$CR"
		puts "$direction step $step of $size - route:$journey:"
		expect { 
			"rest a while" {
				start_timer 2
				send -- "$direction$CR"
				exp_continue
			}
			"you trip and fall" {
				start_timer 2
				send -- "$direction$CR"
				exp_continue
			}
			"there\'s no exit" {
				if { $exit_when_lost == 1 } {
					puts "Something went wrong with navigation."
					close
				} else {
					return [list $direction]
				}
			}
			"You cannot leave in the heat of battle" {
				get_monsters
				set monstername [lindex $monster 0]
				for { set attack 0 } { $attack < $attacks_per_round } { incr attack 1 } {
					send -- "a $monstername$CR"
				}
				start_timer 10
				send -- "$direction$CR"
				exp_continue
			}
			-re {You(\'re| are) (in|inside|outside) (a|the) ([a-z ]*)\..*There (is|are) (a|an|two|three|four) ([a-z][a-z]*)s?[ |,]? (?:[a-z, ]*)here\.} {
				set location $expect_out(4,string)
				set newcoordinates [location_to_coordinates $expect_out(4,string)]
				update_coordinates $direction
				if { !($newcoordinates == [list])} { set x [lindex $newcoordinates 0]; set y [lindex $newcoordinates 1]; set z [lindex $newcoordinates 2] }
				update_learned_travel $direction $lastcoordinates
				set lastcoordinates [list $x $y $z]
				if { !($location == "temple") && !($location == "tavern") && !($location == "guild hall") && !($location == "town vaults") && !($location == "magic shop") && $fasttrack == 0 } {
	                                puts "There are monsters here!"
	                                get_monsters
	                                if { $nomonster == 0 && [expr $i +1] < $size } {
						puts "This is not our final destination, but we'll stay and fight anyway"
	                                        return 1
	                                } elseif { $nomonster == 0 } {
						puts "We made it.  And now let's fight."
						return 1
					} else {
						puts "We made it to our final destination!"
					}
				}
				start_timer 1
                        }
			-re {You(\'re| are) (in|inside|outside) (a|the) ([a-z ]*)\.[\r|\n]} {
				set location $expect_out(4,string)
				set newcoordinates [location_to_coordinates $expect_out(4,string)]
				update_coordinates $direction
				if { !($newcoordinates == [list])} { set x [lindex $newcoordinates 0]; set y [lindex $newcoordinates 1]; set z [lindex $newcoordinates 2] }
				start_timer 1
                                update_learned_travel $direction $lastcoordinates
                                set lastcoordinates [list $x $y $z]
			}
			timeout { close }
		}
		incr i 1
	}
	puts "($x,$y,$z)"
	return 0
}


proc goto { destinationname } {
	global x
	global y
	global z
	set to_coordinates [location_to_coordinates $destinationname]
	if { $to_coordinates == [list $x $y $z] } { puts "You're already here ($destinationname)."; return }
	set route [get_optimal_route $to_coordinates]
	if { !($route == [list]) } {
		set returnstatus [move $route]
		return $returnstatus
	}
	return 0
}


proc get_max_health {} {
	global vitality_max
	global mana_max
	global CR
        send -- "he$CR";
        expect { 
		-re {Mana: *[0-9]* */ *([0-9]*).*\nVitality: *[0-9]* */ *([0-9]*)} {
			set mana_max $expect_out(1,string)
			set vitality_max $expect_out(2,string)
		}
		timeout { close }
	}
	puts "max vit: $vitality_max; max mana: $mana_max\n";
}

proc get_health {} {
	global vitality
	global mana
	global status
	global CR
        send -- "he$CR";
        expect {
		-re {Mana: *([0-9]*) */ *[0-9]*.*\nVitality: *([0-9]*) */ *[0-9]*.*\nStatus: *([A-Za-z]*)} {
			set mana $expect_out(1,string)
			set vitality $expect_out(2,string)
			set status $expect_out(3,string)
		}
		timeout { close }
	} 
	puts "V: $vitality; M: $mana; S: $status\n";
}

proc get_drink {} {
	global CR
        global x
        global y
        global z
        global learned_travel
	set route [get_optimal_route [location_to_coordinates "tavern"]]
        move $route 1
	send -- "b drink$CR"
        expect {
                "brings you" {}
                "that is not an appropriate" { close }
		"you cannot" { close }
		timeout { close }
        }
}

proc get_meal {} {
	global CR
        global x
        global y
        global z
        global learned_travel
        set route [get_optimal_route [location_to_coordinates "tavern"]]
        move $route 1
        send -- "b meal$CR"
        expect {
                "brings you" {}
                "that is not an appropriate" { close }
                "you cannot" { close }
		timeout { close }
        }
}

proc get_healing {} {
	global CR
	global x
	global y
	global z
	global learned_travel
	puts "Going to get some healing..."
        set route [get_optimal_route [location_to_coordinates "temple"]]
        move $route 1
	send -- "b healing$CR"
	expect {
		"heal all" {}
		"that is not an appropriate" { close }
		"you cannot" { close }
		timeout { close }
	}
}

proc track_experience {} {
	global stats
	global CR
	send -- "ep$CR"
	set timeout 20
	set experience ""
	expect {
		-re {Experience:( *)([0-9]*)} { set experience $expect_out(2,string) }
		timeout { close }
	}
	if { !([info exists stats("experience")]) } {
		if { [lindex $stats("experience") 0] == "" && !($experience == "")} {
			set stats("experience") [list $experience]
		}
	} else {
		set newstats [list [lindex $stats("experience") 0] $experience]
		set stats("experience") $newstats
	}
}

proc deposit_money {} {
	global location
	global CR x y z
	send -- "i$CR"
	expect {
		-re {carrying ([0-9]*) gold} {
			set gold $expect_out(1,string)
			puts "You are carrying $gold gold\n"
			if { $gold > 150 } {
				whereami
				set returnlocation [list $x $y $z]
				set deposit [ expr $gold - 60 ]
				goto "town vaults"
				send -- "de $deposit$CR"
				move $returnlocation
			} elseif { $gold == 0 } {
				puts "No gold!  Disconnecting.\n"
				close
			}
		}
		timeout { close }
	}
}
				
	

proc get_potions {} {
	global use_rowan
	global use_hyssop
	global CR

	goto "magic shop"

	if { $use_rowan == 1 } {
		send -- "b rowan$CR"
		send -- "drink rowan$CR"
	}
	if { $use_hyssop == 1 } {
		send -- "b hyssop$CR"
		send -- "drink hyssop$CR"
	}
}

proc check_health {} {
	global vitality
	global mana
	global status
	global spawn_id
	global heal_spell
	global hurt_spell
	global spell
	global location
	global self_heal_threshold
	global temple_heal_threshold
	global x
	global y
	global z
	global CR
	get_health
	set count 0
	set returncoordinates [list $x $y $z]
	while { $status == "Thirsty" || $status == "Hungry" || $vitality < $temple_heal_threshold } {
		incr count 1
		if { $status == "Thirsty" } {
			get_drink
			start_timer 5
		} elseif { $status == "Hungry" } {
			get_meal
			start_timer 5
		} elseif { $vitality < $temple_heal_threshold } {
			get_healing
			start_timer 5
		}
		get_health
	}
	if { $vitality > $self_heal_threshold || $heal_spell == "" } {
		set spell $hurt_spell
	} elseif { $vitality > $temple_heal_threshold } {
		set spell $heal_spell
	} 
	if { $count == 0 } { return 0 } else { return 1 }
}


proc check_attack_response {} {
	global nomonster
        expect  {
		"Your attack" {
			set nomonster 0;
		}
                "lifeless" {
                        set nomonster 1;
                }
                "don't see" {
                        set nomonster 1;
                }
		"physically exhausted" {
			set nomonster 0;
		}
		"attacked you" {
			set nomonster 0;
		}
		"Sorry, you don't see" {
			set nomonster 1;
		}
		"dodged your" {
			set nomonster 0;
		}
		timeout { close }
        }
}


proc attack { monster } {
	global nomonster
	global spell
	global attacks_per_round
	global healtype
	global username
	global CR
	if { $healtype == "heal" } {
		set attackname $username
	} else {
		set attackname $monster
	}
        if { "$spell" != "" } {
                send -- "c $spell $attackname$CR";
        }
	for { set i 0} { $i < $attacks_per_round } {incr i 1} {
		send -- "a $monster$CR";
		check_attack_response
	}
}

proc fight {} {
	global monster nomonster monster_damage vitality_max vitality self_heal_threshold temple_heal_threshold location CR
	set round_timer 16
	set round 0
	set letsfight 1
	
	if { $location == "temple" || $location == "tavern" || $location == "guild hall" || $location == "town vaults" || $location == "magic shop" } { return }

	set old_temple_heal_threshold $temple_heal_threshold
	set old_self_heal_threshold $self_heal_threshold

	set count [get_monsters]
	puts "Fighting $count $monster"
	if { $nomonster == 0 && [info exists monster_damage($monster)] } {
		puts "Monster Damage Per Round: $monster_damage($monster)"
		set min_temple_heal_threshold [expr $monster_damage($monster) * $count]
		if {$min_temple_heal_threshold > $temple_heal_threshold  && $min_temple_heal_threshold <= $vitality_max} { 
			if { $min_temple_heal_threshold > $vitality_max } {
				set temple_heal_threshold $vitality_max
			} else {
				set temple_heal_threshold $min_temple_heal_threshold
			}
		} 
		if {$min_temple_heal_threshold > $vitality_max} { return }
	}
	puts "Temple heal threshold: $temple_heal_threshold"

        while { $nomonster == 0 } {
		if { [check_health] } { return 1 }
		set timeout [timer fight $round_timer]
		puts $timeout
		if { $timeout == 0 } { set timeout $round_timer }
		incr round 1
		set monstername [lindex $monster 0]
                attack $monstername
		expect { 
			-re {The ([a-z0-9 ]*) damage!([\r|\n])} { check_health; set timeout [timer fight $round_timer]; exp_continue } 
			"You\'re thirsty." { check_health; }
			"You\'re hungry." { check_health; }
			"falls to the ground" { puts "He's dead.  Let's move on." }
			"Sorry, you don't see" { puts "Looks like he died." }
		}
                get_monsters
        }
	set temple_heal_threshold $old_temple_heal_threshold
	return 0
}

proc wander_to { to } {
		# This procedure will go to a location and fight creatures on the way
		global location
		global CR
		set continue 1
		set destination $to
		global x y z
		set firstrun 1
		if { !([list $x $y $z] == [location_to_coordinates $to]) } {
			while { !([location_to_coordinates $to] == [list $x $y $z]) } {
				set returnstatus [goto $to]
				if { $returnstatus == 1 } { fight }
			}
                }
}


proc ring_gong {} {
	global nomonster
	global monster
	global vitality_max
	global mana_max
	global mana
	global vitality
	get_monsters
	global use_rowan
	global use_hyssop
	global potion_status
	global CR
	if { $nomonster == 1 } {
		send -- "ri g$CR";
		expect {
			-re {An? .* enters the arena} {
				set response $expect_out(0,string)
				set monster [ exec echo $response | grep "enters" | cut -d " " -f2  | sed -e "s/ *$//"]
				puts "\nmonster: $monster"
				set nomonster 0
			}
			"physically exhausted" {
				start_timer 5
				send -- "ri g$CR"
				exp_continue
			}
			"not an appropriate command" {
				puts "Uh oh, something went wrong.  Better disconnect."
				close
			}
			timeout { close }
		}
	}
	start_timer 5
	fight
        if { [timer potions 600] == 0 && ( $use_rowan == 1 || $use_hyssop == 1 ) } {
                get_potions
		whereami
                goto arena
        }
}

proc interact_loop { {timeout 30 } } {
	global learned_travel
	global CR
	global x y z exit_when_lost
	set fightmode 0
	set wayback [list $x $y $z]
	puts "Autopilot: Disengaged (30 seconds)"
	if { [list $x $y $z] == [list 0 0 0] } { set track 1 } else { set track 0 }
	set exit_when_lost 0
	interact {
		timeout 30 { puts "Autopilot: Engaged"; move [get_optimal_route $wayback]; return; }
		fmode { if { $fightmode == 0 } { set fightmode 1; puts "Fightmode: On" } else { set fightmode 0; puts "Fightmode: Off" } }
		-re {(ne|nw|se|sw|e|w|n|s|u|d)[\r|\n]} {
			set result [move [list $interact_out(1,string)] $fightmode]
			if { $fightmode == 1 } {
				fight
			}
		}
		-re {^goto ([a-z ]*)[\r|\n]} { 
			set dcoordinates [location_to_coordinates $interact_out(1,string)]
			while { !($dcoordinates == [list $x $y $z]) } {
				goto $interact_out(1,string) 
				fight
			}
		}
	        -re {^([a-z]+)[\r|\n]} {
			puts $interact_out(1,string)
			send -- "$interact_out(1,string)$CR"
		}
		fight { puts "Autopilot temporarily engaged"; fight; puts "Autopilot disengaged" }
		resume { puts "Autopilot: Engaged"; move [reverse_route $wayback]; return; }
		home { move [get_optimal_route [list 0 0 0]] 1 }
		monsters { get_monsters }
		exit { close }
	}
	set exit_when_lost 1
}

set send_human {.1 .3 1 .05 2}
if { $debug == "true" } {
	connect_test
} else {
	connect
}

start_timer 2
whereami
get_max_health
puts "Got max health\n"
check_health
puts "Checked initial health\n"
interact_loop
goto arena

# This is the main loop that runs
while { 0 == 0 } {
	# Every round, we reload the config.  This allows us to change parameters on-the-fly without disconnecting.
	source config.expect
	check_health
	# MINOTAUR
	if { [ timer mino $mino_interval ] == 0 && $attack_mino == 1} {
		set monster "minotaur"
		set old_temple_heal_threshold $temple_heal_threshold
		if { $temple_heal_threshold < 50 } { set temple_heal_threshold 50 }
		set continue 1
		whereami
		if { $vitality < $self_heal_threshold } {
			get_healing
		}
		wander_to "minotaur"
		set temple_heal_threshold $old_temple_heal_threshold
		whereami
                wander_to "arena"
		check_health
        }
	# GRIFFON
        if { [ timer griffon $griffon_interval ] == 0 && $attack_griffon == 1} {
                set monster "griffon"
                set old_temple_heal_threshold $temple_heal_threshold
		set old_self_heal_threshold $self_heal_threshold
                if { $temple_heal_threshold < 70 } { set temple_heal_threshold 70 }
		if { $self_heal_threshold < 85 } { set self_heal_threshold 85 }
                set continue 1
                whereami
		get_drink
                if { $vitality < $self_heal_threshold } {
                        get_healing
                }
                wander_to "griffon"
                set temple_heal_threshold $old_temple_heal_threshold
		set self_heal_threshold $old_self_heal_threshold
                whereami
                wander_to "arena"
                check_health
        }
	wander_to "arena"
	ring_gong
	check_health
	if { $vitality < $vitality_max || $mana < $mana_max } {
		goto "north plaza"
		track_experience
#		send -- "ep$CR"
		if { $make_deposits == "true" } { deposit_money }
                puts "\n"
		if { [expr ($vitality*100)/$vitality_max] < 80 } { 
			check_health
			interact_loop
			check_health
		}
	} else {
		start_timer 5
	}
	wander_to "arena"
}

expect eof
