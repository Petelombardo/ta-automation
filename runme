#!/usr/bin/expect -f
set timeout -1
#spawn ./ta-test
#send -- "he\n";
source config.expect
set potion_start 0
set potion_status "expired"
set nomonster 1
set monster ""
set debug false
set mino_elapsed 0
set mino_time 0
set lastdestination ""
array set universal_timer {}
array set universal_timer_elapsed {}

proc start_timer { secs } {
        puts "Starting timer for $secs seconds\n"
        set then [ clock seconds ]
        set now $then
        set diff [expr $now - $then]
        while {$diff < $secs } {
                set now [clock seconds];
                set diff [expr $now - $then]
        }
}

proc potion_timer { action } {
	global potion_start
	global potion_status
	if { $potion_start == "" } { set potion_start 0 }
	if { $action == "start" || $action == "restart" } {
		set potion_start [ clock seconds ]
		set potion_status "ongoing"		
	} else {
		set now [clock seconds]
		set diff [expr $now - $potion_start]
		if { $diff > 800 } {
			set potion_status "expired"
		}
	}
}

proc timer { type sec } {
	global universal_timer
	global universal_timer_elapsed
	set universal_timer($type) $sec
	set now [ clock seconds ]
	if {![info exists universal_timer_elapsed($type)]} {
		set universal_timer_elapsed($type) $now
		return 0
	} else {
		set then $universal_timer_elapsed($type)
		set now [ clock seconds ]
		set elapsed [ expr $now - $then ]
		if { $elapsed >= $universal_timer($type) } {
			set universal_timer_elapsed($type) $now
			return 1
		} else {
			return 0
		}
	}
	return 0
}

proc connect {} {
	global env
	global spawn_id
	global username
	global password
	global server
	global port
	spawn telnet $server $port
	set count 0
	expect {
		"User-ID" {
			if { $count > 0 } {
				start_timer 2
			}
			send -- "$username\r\n"; 
			incr count 1; 
			exp_continue
		}
		"identify" { send -h "$username\r\n"; exp_continue }
		"access code" { send -h "$password\r\n"; exp_continue }
		"Login" { send -h "$username\r\n"; exp_continue }
		"assword" { send -h "$password\r\n"; exp_continue }
		"Press ENTER to continue)" { send -h "\n"; exp_continue }
		"Multi-User Games" { send -h "\ng\r\n"; exp_continue }
		"T,C,E,A,P,R,I,G,O,L,F,V" { send -h "\ng\r\n"; exp_continue }
		"Trivia Top Ten" { send -- "\n"; exp_continue }
		"1,2,3,4,5,7,8,9,0,B,C,D,E,F,G,H,I,J,L,M,N,O" { send -h "\n3\r\n"; }
		-re {2,T,A,F,M,S,L,H,R,O,N,I,K.*X to exit} { send -h "a\r\n"; }
		"(N)onstop" { send -h "\r\n"; exp_continue }
		"/GO KEYS" { send -h "/go ta\r\n" }
		"(C)ontinue" { send -h "\n"; exp_continue }
	}
}

proc connect_test {} {
	global spawn_id
	spawn ./ta-test
}


proc disconnect {} {
	close
	exit
}

proc whereami {} {
	global location
	set location ""
	puts "--Getting location\n"
	set count 0
	send "\r\n"
	expect -re {You(\'re| are) (in|inside) (a|the) ([a-z ]*)\.} {
		set location $expect_out(4,string)
	} else {
		start_timer 1
		send "\r\n"
		if { $count < 5 } {
			exp_continue
			incr count 1
		} else {
			puts "Problem getting your location.  Exiting."
			close
		}
	}
	puts "--Location: $location\n"
}

proc get_monsters {} {
        global monster;
        global nomonster;
        puts "Checking for monsters\n";
        send "\r\n";
        expect {
                -re {There (is|are) (a|an|two|three|four) ([a-z][a-z]*)s?[ |,]? ([a-z]*)? ?.*here} {
                        set monster $expect_out(3,string);
                        set nomonster 0;
                        puts "Found a $monster!"
                }
                "nobody" {
                        set nomonster 1;
                }
                -re {^(.*) is here.} {
                        set nomonster 1;
                }
        }
        puts "Monster:$monster; nomonster:$nomonster\n";
}


proc travel { from to } {
	global journey
	global monster
	array unset journey
	puts "Heading from $from to $to\n"
	# Make north plaza the waypoint on all journeys
	if { $from != "north plaza" && $to != "north plaza" } { set to "north plaza"; puts "... with a waypoint at north plaza." }
	# FROM the north plaza
	if { $from == "north plaza" && $to == "guild hall" } { array set journey { 0 n } }
	if { $from == "north plaza" && $to == "tavern" } { array set journey { 0 ne } }
	if { $from == "north plaza" && $to == "arena" } { array set journey { 0 e } }
	if { $from == "north plaza" && $to == "temple" } { array set journey { 0 w } }
        if { $from == "north plaza" && $to == "magic shop" } { array set journey { 0 s 1 s } }
	if { $from == "north plaza" && $to == "large cavern" && $monster == "minotaur" } { array set journey { 0 e 1 d 2 w 3 w 4 w 5 sw 6 s 7 s } }
	if { $from == "north plaza" && $to == "dungeon entrance" } { array set journey { 0 e 1 d } }
	if { $from == "north plaza" && $to == "town vaults" } { array set journey { 0 n 1 d } }
	# TO the north plaza
	if { $from == "tavern" && $to == "north plaza" } { array set journey { 0 sw } }
	if { $from == "magic shop" && $to == "north plaza" } { array set journey { 0 n 1 n } }
	if { $from == "temple" && $to == "north plaza" } { array set journey { 0 e } }
	if { $from == "arena" && $to == "north plaza" } { array set journey { 0 w } }
	if { $from == "guild hall" && $to == "north plaza" } { array set journey { 0 s } }
	if { $from == "minotaur" && $to == "north plaza" } { array set journey { 0 n 1 n 2 ne 3 e 4 e 5 e 6 u 7 w } }
	if { $from == "dungeon entrance" && $to == "north plaza" } { array set journey { 0 u 1 w } }
	if { $from == "large cavern" && $to == "north plaza" && $monster == "minotaur" } { array set journey { 0 n 1 n 2 ne 3 e 4 e 5 e 6 u 7 w } }
	if { $from == "town vaults" && $to == "north plaza" } { array set journey { 0 u 1 s } }
}
	
proc goto { to } {
	global location
	global journey
	global lastdestination
	global monster
	global nomonsters
	global attacks_per_round
#	if { $lastdestination == "minotaur" && $location == "large cavern" } { $location == "minotaur" }
#	set lastdestination $to
	travel $location $to
	if { $location == $to } { return }
	set i 0
	set size [array size journey]
	while { $i < $size } {
		puts "$journey($i)\r\n"
		send -- "$journey($i)\r\n"
		expect { 
			"$to" { puts "Made it to $to, continuing."; incr i 1} 
			"rest a while" {
				start_timer 2
				send -- "$journey($i)\r\n"
				exp_continue
			}
			"you trip and fall" {
				start_timer 2
				send -- "$journey($i)\r\n"
				exp_continue
			}
			"$to" { puts "Made it to $to, continuing."; incr i 1}
			-re {You(\'re| are) in} {
				puts "Waiting 2 secs before taking a step.\n"
				start_timer 2
				incr i 1
			}
			"cannot leave" {
				puts "Uh oh.  Need to go attack something first."
				get_monsters
				if { $nomonsters == 0 } {
					for {set i 0} { $i < $attacks_per_round } { incr i 1 } {
						send -- "a $monster\r\n"
						start_timer 5
					}
				}
				exp_continue
			}
		}
		if { $i == $size } {
			whereami
			if { $to != $location } {
				puts "Reached a waypoint.  Heading from $location to $to\n";
				travel $location $to
				set i 0
				set size [array size journey]
				puts "Starting second leg -- i:$i size:$size\n"
				unset expect_out(buffer)
			}
		}
	}
}


proc get_max_health {} {
	global vitality_max
	global mana_max
        send -- "he\r\n";
        expect -re {Mana: *[0-9]* */ *([0-9]*).*\nVitality: *[0-9]* */ *([0-9]*)} {
		set mana_max $expect_out(1,string)
		set vitality_max $expect_out(2,string)
	}
	puts "max vit: $vitality_max; max mana: $mana_max\n";
}

proc get_health {} {
	global vitality
	global mana
	global status
        send -- "he\r\n";
        expect -re {Mana: *([0-9]*) */ *[0-9]*.*\nVitality: *([0-9]*) */ *[0-9]*.*\nStatus: *([A-Za-z]*)} {
		set mana $expect_out(1,string)
		set vitality $expect_out(2,string)
		set status $expect_out(3,string)
        } 
	puts "V: $vitality; M: $mana; S: $status\n";
}

proc get_drink {} {
	goto tavern
	send -- "b drink\r\n"
}

proc get_meal {} {
	goto tavern
        send -- "b meal\r\n"
}

proc get_healing {} {
	goto temple
	send -- "b healing\r\n"
}

proc deposit_money {} {
	global location
	send -- "i\r\n"
	expect {
		-re {carrying ([0-9]*) gold} {
			set gold $expect_out(1,string)
			puts "You are carrying $gold gold\n"
			if { $gold > 150 } {
				whereami
				set returnlocation $location
				set deposit [ expr $gold - 60 ]
				goto "town vaults"
				send -- "de $deposit\r\n"
				goto $returnlocation
			} elseif { $gold == 0 } {
				puts "No gold!  Disconnecting.\n"
				close
			}
		}
	}
}
				
	

proc get_potions {} {
	global use_rowan
	global use_hyssop
	goto "magic shop"
	if { $use_rowan == 1 } {
		send -- "b rowan\r\n"
		send -- "drink rowan\r\n"
	}
	if { $use_hyssop == 1 } {
		send -- "b hyssop\r\n"
		send -- "drink hyssop\r\n"
	}
}

proc check_health {} {
	global vitality
	global mana
	global status
	global spawn_id
	global heal_spell
	global hurt_spell
	global spell
	global location
	global self_heal_threshold
	global temple_heal_threshold
	get_health
	set count 0
	set returnto $location
	while { $status == "Thirsty" || $status == "Hungry" || $vitality < $temple_heal_threshold } {
		if { $count == 0 } {
			whereami
			set returnto $location
			incr count 1
		}
		if { $status == "Thirsty" } {
			get_drink
			start_timer 5
		} elseif { $status == "Hungry" } {
			get_meal
			start_timer 5
		} elseif { $vitality < $temple_heal_threshold } {
			get_healing
			start_timer 5
		}
		get_health
	}
	if { $count > 0 } {
		whereami
		if { $returnto != $location } {
			goto $returnto
		}
	}
	if { $vitality > $self_heal_threshold || $heal_spell == "" } {
		if { $returnto != $location } { goto $returnto }
		set spell $hurt_spell
	} elseif { $vitality > $temple_heal_threshold } {
		if { $returnto != $location } { goto $returnto }
		set spell $heal_spell
	} 
}


proc check_attack_response {} {
	global nomonster
        expect  {
		"Your attack" {
			set nomonster 0;
		}
                "lifeless" {
                        set nomonster 1;
                }
                "don't see" {
                        set nomonster 1;
                }
		"physically exhausted" {
			set nomonster 0;
		}
		"attacked you" {
			set nomonster 0;
		}
		"Sorry, you don't see" {
			set nomonster 1;
		}
		"dodged your" {
			set nomonster 0;
		}
        }
}


proc attack { monster } {
	global nomonster
	global spell
	global attacks_per_round
	global healtype
	global username
	if { $healtype == "heal" } {
		set attackname $username
	} else {
		set attackname $monster
	}
        if { "$spell" != "" } {
                send -- "c $spell $attackname\r\n";
        }
	for { set i 0} { $i < $attacks_per_round } {incr i 1} {
		send -- "a $monster\r\n";
		check_attack_response
	}
}

proc fight {} {
	global monster
	global nomonster
	get_monsters
        while { $nomonster == 0 } {
                attack $monster
                check_health
                start_timer 7
                check_health
                start_timer 8
                check_health
                get_monsters
        }
}

proc ring_gong {} {
	global nomonster
	global monster
	global vitality_max
	global mana_max
	global mana
	global vitality
	get_monsters
	global use_rowan
	global potion_status
	if { $nomonster == 1 } {
		send -- "ri g\r\n";
		expect {
			-re {An? .* enters the arena} {
				set response $expect_out(0,string)
				set monster [ exec echo $response | grep "enters" | cut -d " " -f2  | sed -e "s/ *$//"]
				puts "\nmonster: $monster"
				set nomonster 0
			}
			"physically exhausted" {
				start_timer 5
				send -- "ri g\r\n"
				exp_continue
			}
		}
	}
	start_timer 5
	while { $nomonster == 0 } {
		attack $monster
		check_health
		start_timer 7
		check_health
		start_timer 8			
		check_health
		get_monsters
	}
        if { [timer potions 600] && ( $use_rowan == 1 || $use_hyssop == 1 ) } {
                get_potions
		whereami
                goto arena
        }
}

set send_human {.1 .3 1 .05 2}
if { $debug == "true" } {
	connect_test
} else {
	connect
}

start_timer 2
whereami
get_max_health
puts "Got max health\n"
check_health
puts "Checked initial health\n"
goto arena

# This is the main loop that runs
while { 0 == 0 } {
	# Every round, we reload the config.  This allows us to change parameters on-the-fly without disconnecting.
	source config.expect
	check_health
	if { $vitality_max > 50 && $vitality > 50 && [ timer mino 300 ]  && $attack_mino == 1} {
		set monster "minotaur"
		set old_temple_heal_threshold $temple_heal_threshold
		if { $temple_heal_threshold < 50 } { set temple_heal_threshold 50 }
                goto "large cavern"
		fight
		set temple_heal_threshold $old_temple_heal_threshold
                goto arena
        }
	ring_gong
	check_health
	if { $vitality < $vitality_max || $mana < $mana_max } {
		goto "north plaza"
		send -- "ep\r\n"
		deposit_money
                puts "\n"
		start_timer 18
		check_health
		start_timer 18
	} else {
		start_timer 5
	}
	goto "arena"
}

expect eof
