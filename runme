#!/usr/bin/expect -f
set timeout -1
#spawn ./ta-test
#send -- "he\n";
source config.expect
set potion_start 0
set potion_status "expired"
set nomonster 1
set monster ""
set debug false
set mino_elapsed 0
set mino_time 0
if { !([info exists mino_interval]) } { set mino_interval 480 }
if { !([info exists griffon_interval]) } { set griffon_interval 480 }
set lastdestination ""
array set universal_timer {}
array set universal_timer_elapsed {}
array set learned_travel {}
source destinations.expect
set x 0
set y 0
set z 0
if { $debug == "true" } {
	set CR "\n"
} else {
	set CR "\r\n"
}

proc start_timer { secs } {
        puts "Starting timer for $secs seconds"
        set then [ clock seconds ]
        set now $then
        set diff [expr $now - $then]
        while {$diff < $secs } {
                set now [clock seconds];
                set diff [expr $now - $then]
        }
}

proc potion_timer { action } {
	global potion_start
	global potion_status
	if { $potion_start == "" } { set potion_start 0 }
	if { $action == "start" || $action == "restart" } {
		set potion_start [ clock seconds ]
		set potion_status "ongoing"		
	} else {
		set now [clock seconds]
		set diff [expr $now - $potion_start]
		if { $diff > 800 } {
			set potion_status "expired"
		}
	}
}

proc timer { type sec } {
	global universal_timer
	global universal_timer_elapsed
	set universal_timer($type) $sec
	set now [ clock seconds ]
	if {![info exists universal_timer_elapsed($type)]} {
		set universal_timer_elapsed($type) $now
		return 0
	} else {
		set then $universal_timer_elapsed($type)
		set now [ clock seconds ]
		set elapsed [ expr $now - $then ]
		if { $elapsed >= $universal_timer($type) } {
			set universal_timer_elapsed($type) $now
			return 1
		} else {
			return 0
		}
	}
	return 0
}

proc connect {} {
	global env
	global spawn_id
	global username
	global password
	global server
	global port
	global CR
	spawn telnet $server $port
	set count 0
	expect {
		"User-ID" {
			if { $count > 0 } {
				start_timer 2
			}
			send -- "$username$CR"; 
			incr count 1; 
			exp_continue
		}
		"identify" { send -h "$username$CR"; exp_continue }
		"access code" { send -h "$password$CR"; exp_continue }
		"Login" { send -h "$username$CR"; exp_continue }
		"assword" { send -h "$password$CR"; exp_continue }
		"Press ENTER to continue)" { send -h "\n"; exp_continue }
		"Multi-User Games" { send -h "\ng$CR"; exp_continue }
		"T,C,E,A,P,R,I,G,O,L,F,V" { send -h "\ng$CR"; exp_continue }
		"Trivia Top Ten" { send -- "\n"; exp_continue }
		"1,2,3,4,5,7,8,9,0,B,C,D,E,F,G,H,I,J,L,M,N,O" { send -h "\n3$CR"; }
		-re {2,T,A,F,M,S,L,H,R,O,N,I,K.*X to exit} { send -h "a$CR"; }
		"(N)onstop" { send -h "$CR"; exp_continue }
		"/GO KEYS" { send -h "/go ta$CR" }
		"H,G,C,L" { send -h "/go ta$CR" }
		"(C)ontinue" { send -h "\n"; exp_continue }
	}
}

proc connect_test {} {
	global spawn_id
	spawn ./ta-test
}


proc disconnect {} {
	close
	exit
}

proc whereami {} {
	global location
	global x
	global y
	global z
	global CR
	set location ""
	puts "--Coordinates: $x $y $z; Getting location\n"
	set count 0
	send "$CR"
	expect -re {You(\'re| are) (in|inside|outside) (a|the) ([a-z ]*)\.} {
		if { !($location == [list $x $y $z]) } {
			set location $expect_out(4,string)
		}
	} else {
		start_timer 1
		send "$CR"
		if { $count < 5 } {
			exp_continue
			incr count 1
		} else {
			puts "Problem getting your location.  Exiting."
			close
		}
	}
	set coordinates [location_to_coordinates $location]
	if { [info exists coordinates] && !($coordinates == "") } {
		set x [lindex $coordinates 0]
		set y [lindex $coordinates 1]
		set z [lindex $coordinates 2]
	}	
	puts "--Location: $location\n"
	return $location
}

proc get_monsters {} {
        global monster;
        global nomonster;
	global CR
        puts "Checking for monsters";
        send "$CR";
        expect {
                -re {There (is|are) (a|an|two|three|four) ([a-z][a-z]*)s?[ |,]? ([a-z]*)? ?.*here\.} {
                        set monster $expect_out(3,string);
                        set nomonster 0;
                        puts "Found a $monster!"
                }
                "nobody" {
                        set nomonster 1;
                }
                -re {^(.*) is here.} {
                        set nomonster 1;
                }
        }
        puts "Monster:$monster; nomonster:$nomonster\n";
}

proc reverse_route { directions } {
        set directions [lreverse $directions]
	set newdirections [list]
	set size [llength $directions]
        for { set i 0 } { $i < $size } { incr i 1 } {
		set direction [lindex $directions $i]
                if { $direction == "e" } { lappend newdirections "w" }
                if { $direction == "w" } { lappend newdirections "e" }
                if { $direction == "n" } { lappend newdirections "s" }
                if { $direction == "s" } { lappend newdirections "n" }
                if { $direction == "ne" } { lappend newdirections "sw" }
                if { $direction == "se" } { lappend newdirections "nw" }
                if { $direction == "nw" } { lappend newdirections "se" }
                if { $direction == "sw" } { lappend newdirections "ne" }
		if { $direction == "d" } { lappend newdirections "u" }
		if { $direction == "u" } { lappend newdirections "d" }
        }
        return $newdirections
}

proc update_coordinates { direction } {
	global x
	global y
	global z
	if { $direction == "e" } { set x [expr $x + 1] }
	if { $direction == "w" } { set x [expr $x - 1] }
	if { $direction == "n" } { set y [expr $y + 1] }
	if { $direction == "s" } { set y [expr $y - 1] }
	if { $direction == "ne" } { set x [expr $x + 1]; set y [expr $y + 1] }
	if { $direction == "sw" } { set x [expr $x - 1]; set y [expr $y - 1] }
	if { $direction == "nw" } { set x [expr $x - 1]; set y [expr $y + 1] }
	if { $direction == "se" } { set x [expr $x + 1]; set y [expr $y - 1] }
	if { $direction == "d" } { set z [expr $z - 1] }
	if { $direction == "u" } { set z [expr $z + 1] }
}

proc move { journey {fasttrack 0} } {
	global location
	global lastdestination
	global monster
	global nomonster
	global attacks_per_round
	global x
	global y
	global z
	global learned_travel
	global CR
	
	if { $journey == [list] } { return }
	set from [list $x $y $z]
	set size [llength $journey]
	set i 0

	while { $i < $size } {
		set direction [lindex $journey $i]
		if { [info exists learned_travel($from)] } {
			if { !($from == [list 0 0 0]) } {
				set learned_route [reverse_route $learned_travel($from)]
			} else {
				set learned_route $learned_travel($from)
			}
			puts "Learned route: $learned_travel($from)"
		}
		set step [expr $i + 1]
		puts "$direction step $step of $size - route:$journey:"
		send -- "$direction$CR"
		expect { 
			"rest a while" {
				start_timer 2
				send -- "$direction$CR"
				exp_continue
			}
			"you trip and fall" {
				start_timer 2
				send -- "$direction$CR"
				exp_continue
			}
			"there\'s no exit" {
				puts "Something went wrong with navigation."
				close
			}
			"You cannot leave in the heat of battle" {
				get_monsters
				for { set attack 0 } { $attack < $attacks_per_round } { incr attack 1 } {
					send -- "a $monster$CR"
				}
				start_timer 10
				send -- "$direction$CR"
				exp_continue
			}
			-re {You(\'re| are) (in|inside|outside) (a|the) ([a-z ]*)\..*There (is|are) (a|an|two|three|four) ([a-z][a-z]*)s?[ |,]? ([a-z]*)?([a-z ]*)here\.} {
				update_coordinates $direction
				set mycoordinates [list $x $y $z]
                                if { $from == [list 0 0 0] } {
                                        lappend myjourney $direction
                                        if { ! [ info exists learned_travel($mycoordinates)] } {
                                                set learned_travel($mycoordinates) $myjourney
                                                puts "learned_travel($mycoordinates) = $myjourney"
                                        }
                                }
				if { $mycoordinates != [list 0 0 0] && $mycoordinates != [list -1 0 0] && $mycoordinates != [list 0 1 0] && $mycoordinates != [list 0 1 -1] && $mycoordinates != [list 1 2 0] && $mycoordinates != [list 0 -2 0] && $fasttrack == 0 } {
	                                puts "There are monsters here!"
	                                get_monsters
	                                if { $nomonster == 0 && [expr $i +1] < $size } {
						puts "This is not our final destination, but we'll stay and fight anyway"
	                                        set remainingjourney [list]
	                                        for { set j [expr $i +1] } {$j < $size} { incr j 1 } {
	                                                lappend remainingjourney [lindex $journey $j]
	                                        }
						puts "Recalculating route: $remainingjourney"
	                                        return $remainingjourney
	                                } else {
						puts "We made it to our final destination!"
					}
				}
                        }
			-re {You(\'re| are) (in|inside|outside) (a|the) ([a-z ]*)\.} {
				set location $expect_out(4,string)
				update_coordinates $direction
				set mycoordinates [list $x $y $z]
				start_timer 2
				if { $from == [list 0 0 0] } {
					lappend myjourney $direction
                                        if { ! [ info exists learned_travel($mycoordinates)] } {
                                                set learned_travel($mycoordinates) $myjourney
                                                puts "learned_travel($mycoordinates) = $myjourney"
                                        }
				}
			}
		}
		incr i 1
	}
}


proc goto { destinationname } {
	global x
	global y
	global z
	set coordinates [location_to_coordinates $destinationname]
	if { $coordinates == [list $x $y $z] } { puts "You're already here ($destinationname)."; return }
	if { ! ($destinationname == "north plaza") && !($coordinates == [list 0 0 0])} {
	        set waypoint [location_to_coordinates "north plaza"]
	        set route [get_route $waypoint]
		if { !($route == "") && !($route == [list]) && !($route == 0) } {
		        set remaining [move $route]
			if {!($remaining=="") && !($remaining==0)} {
				return $remaining
			}
		        puts "Reached waypoint.  Now heading to the $destinationname."
		} else {
			puts "Empty route.  Staying put."
		}
	}
        set destination [location_to_coordinates $destinationname]
        set route [get_route $destination]
	puts "Heading for $destinationname ($destination) via the route $route"
        set remaining [move $route]
	if {!($remaining=="")} {
		return $remaining
	}
	return 0
}


proc get_max_health {} {
	global vitality_max
	global mana_max
	global CR
        send -- "he$CR";
        expect -re {Mana: *[0-9]* */ *([0-9]*).*\nVitality: *[0-9]* */ *([0-9]*)} {
		set mana_max $expect_out(1,string)
		set vitality_max $expect_out(2,string)
	}
	puts "max vit: $vitality_max; max mana: $mana_max\n";
}

proc get_health {} {
	global vitality
	global mana
	global status
	global CR
        send -- "he$CR";
        expect -re {Mana: *([0-9]*) */ *[0-9]*.*\nVitality: *([0-9]*) */ *[0-9]*.*\nStatus: *([A-Za-z]*)} {
		set mana $expect_out(1,string)
		set vitality $expect_out(2,string)
		set status $expect_out(3,string)
        } 
	puts "V: $vitality; M: $mana; S: $status\n";
}

proc get_drink {} {
	global CR
        global x
        global y
        global z
        global learned_travel
        set coordinates [list $x $y $z]
        if { [info exists learned_travel($coordinates)] && [llength $learned_travel($coordinates)] > 0 } {
                set fromtown $learned_travel($coordinates)
                set totown [reverse_route $fromtown]
                move $totown 1
                puts "Using learned travel to get back to town."
        }
	goto "tavern"
	send -- "b drink$CR"
        expect {
                "brings you" {}
                "that is not an appropriate" { close }
		"you cannot" { close }
        }
}

proc get_meal {} {
	global CR
        global x
        global y
        global z
        global learned_travel
        set coordinates [list $x $y $z]
        if { [info exists learned_travel($coordinates)] && [llength $learned_travel($coordinates)] > 0 } {
                set fromtown $learned_travel($coordinates)
                set totown [reverse_route $fromtown]
                move $totown 1
                puts "Using learned travel to get back to town."
        }
        goto "tavern"
        send -- "b meal$CR"
        expect {
                "brings you" {}
                "that is not an appropriate" { close }
                "you cannot" { close }
        }
}

proc get_healing {} {
	global CR
	global x
	global y
	global z
	global learned_travel
	set coordinates [list $x $y $z]
	if { [info exists learned_travel($coordinates)] && [llength $learned_travel($coordinates)] > 0 } {
		set fromtown $learned_travel($coordinates)
		set totown [reverse_route $fromtown]
		move $totown 1
		puts "Using learned travel to get back to town."
	}
	goto "temple"
	send -- "b healing$CR"
	expect {
		"heal all" {}
		"that is not an appropriate" { close }
		"you cannot" { close }
	}
}

proc deposit_money {} {
	global location
	global CR
	send -- "i$CR"
	expect {
		-re {carrying ([0-9]*) gold} {
			set gold $expect_out(1,string)
			puts "You are carrying $gold gold\n"
			if { $gold > 150 } {
				whereami
				set returnlocation $location
				set deposit [ expr $gold - 60 ]
				goto "town vaults"
				send -- "de $deposit$CR"
				whereami
				goto $returnlocation
			} elseif { $gold == 0 } {
				puts "No gold!  Disconnecting.\n"
				close
			}
		}
	}
}
				
	

proc get_potions {} {
	global use_rowan
	global use_hyssop
	global CR

	goto "magic shop"

	if { $use_rowan == 1 } {
		send -- "b rowan$CR"
		send -- "drink rowan$CR"
	}
	if { $use_hyssop == 1 } {
		send -- "b hyssop$CR"
		send -- "drink hyssop$CR"
	}
}

proc check_health {} {
	global vitality
	global mana
	global status
	global spawn_id
	global heal_spell
	global hurt_spell
	global spell
	global location
	global self_heal_threshold
	global temple_heal_threshold
	global x
	global y
	global z
	global CR
	get_health
	set count 0
	set returncoordinates [list $x $y $z]
	set returnto $location
	while { $status == "Thirsty" || $status == "Hungry" || $vitality < $temple_heal_threshold } {
		if { $count == 0 } {
			set returncoordinates [list $x $y $z]
			incr count 1
		}
		if { $status == "Thirsty" } {
			get_drink
			start_timer 5
		} elseif { $status == "Hungry" } {
			get_meal
			start_timer 5
		} elseif { $vitality < $temple_heal_threshold } {
			get_healing
			start_timer 5
		}
		get_health
	}
	if { $count > 0 } {
		if { !($returncoordinates == [list $x $y $z]) } {
			set waypoint [list 0 0 0]
			set route [get_route $waypoint]
			move $route
			set route [get_route $returncoordinates]
			move $route
		}
	}
	if { $vitality > $self_heal_threshold || $heal_spell == "" } {
		if { !($returncoordinates == [list $x $y $z]) } { 
			set waypoint [list 0 0 0]
                        set route [get_route $waypoint]
                        move $route     
                        set route [get_route $returncoordinates]
                        move $route
		}
		set spell $hurt_spell
	} elseif { $vitality > $temple_heal_threshold } {
                 if { !($returncoordinates == [list $x $y $z]) } { 
			set waypoint [list 0 0 0]
                        set route [get_route $waypoint]
                        move $route
                        set route [get_route $returncoordinates]
                        move $route
		}
		set spell $heal_spell
	} 
}


proc check_attack_response {} {
	global nomonster
        expect  {
		"Your attack" {
			set nomonster 0;
		}
                "lifeless" {
                        set nomonster 1;
                }
                "don't see" {
                        set nomonster 1;
                }
		"physically exhausted" {
			set nomonster 0;
		}
		"attacked you" {
			set nomonster 0;
		}
		"Sorry, you don't see" {
			set nomonster 1;
		}
		"dodged your" {
			set nomonster 0;
		}
        }
}


proc attack { monster } {
	global nomonster
	global spell
	global attacks_per_round
	global healtype
	global username
	global CR
	if { $healtype == "heal" } {
		set attackname $username
	} else {
		set attackname $monster
	}
        if { "$spell" != "" } {
                send -- "c $spell $attackname$CR";
        }
	for { set i 0} { $i < $attacks_per_round } {incr i 1} {
		send -- "a $monster$CR";
		check_attack_response
	}
}

proc fight {} {
	global monster
	global nomonster
	global CR
	get_monsters
        while { $nomonster == 0 } {
                attack $monster
                check_health
                start_timer 7
                check_health
                start_timer 7
                check_health
                get_monsters
        }
}

proc wander_to { to } {
		# This procedure will go to a location and fight creatures on the way
		global location
		global CR
		set continue 1
		set destination $to
		global x
		global y
		global z
	        while { $continue == 1 } {
			set coordinates [list $x $y $z]
			if { !($coordinates == [location_to_coordinates $to]) } {
	                        set remainingjourney [goto $destination]
	                        puts "Remaining Journey: $remainingjourney; location:$location to:$to"
				set coordinates [list $x $y $z]
				fight
			}
                        if { [info exists remainingjourney] && [llength $remainingjourney] > 0 && !($remainingjourney == 0)} {
				set size [llength $remainingjourney]
				set to [lindex $remainingjourney $size]
                                #set destination $remainingjourney
                                puts "Continuing with loop"
				move $remainingjourney
				set coordinates [list $x $y $z]
				if { [list $x $y $z] == [location_to_coordinates $to] } {
					set continue 0
				} else {
					set continue 1
				}
				fight
                        } elseif { !($coordinates == [location_to_coordinates $to]) && !($to == "")} {
				set continue 0
				set remainingjourney [goto $to]
			} else {
                                puts "Not continuing with loop"
                                set continue 0
                        }
                }
}


proc ring_gong {} {
	global nomonster
	global monster
	global vitality_max
	global mana_max
	global mana
	global vitality
	get_monsters
	global use_rowan
	global use_hyssop
	global potion_status
	global CR
	if { $nomonster == 1 } {
		send -- "ri g$CR";
		expect {
			-re {An? .* enters the arena} {
				set response $expect_out(0,string)
				set monster [ exec echo $response | grep "enters" | cut -d " " -f2  | sed -e "s/ *$//"]
				puts "\nmonster: $monster"
				set nomonster 0
			}
			"physically exhausted" {
				start_timer 5
				send -- "ri g$CR"
				exp_continue
			}
			"not an appropriate command" {
				puts "Uh oh, something went wrong.  Better disconnect."
				close
			}
		}
	}
	start_timer 5
	while { $nomonster == 0 } {
		attack $monster
		check_health
		start_timer 7
		check_health
		start_timer 8			
		check_health
		get_monsters
	}
        if { [timer potions 600] && ( $use_rowan == 1 || $use_hyssop == 1 ) } {
                get_potions
		whereami
                goto arena
        }
}

set send_human {.1 .3 1 .05 2}
if { $debug == "true" } {
	connect_test
} else {
	connect
}

start_timer 2
whereami
get_max_health
puts "Got max health\n"
check_health
puts "Checked initial health\n"
goto arena

# This is the main loop that runs
while { 0 == 0 } {
	# Every round, we reload the config.  This allows us to change parameters on-the-fly without disconnecting.
	source config.expect
	check_health
	# MINOTAUR
	if { [ timer mino $mino_interval ]  && $attack_mino == 1} {
		set monster "minotaur"
		set old_temple_heal_threshold $temple_heal_threshold
		if { $temple_heal_threshold < 50 } { set temple_heal_threshold 50 }
		set continue 1
		whereami
		if { $vitality < $self_heal_threshold } {
			get_healing
		}
		wander_to "minotaur"
		set temple_heal_threshold $old_temple_heal_threshold
		whereami
                wander_to "arena"
		check_health
        }
	# GRIFFON
        if { [ timer griffon $griffon_interval ]  && $attack_griffon == 1} {
                set monster "griffon"
                set old_temple_heal_threshold $temple_heal_threshold
                if { $temple_heal_threshold < 60 } { set temple_heal_threshold 60 }
                set continue 1
                whereami
		get_drink
                if { $vitality < $self_heal_threshold } {
                        get_healing
                }
                wander_to "griffon"
                set temple_heal_threshold $old_temple_heal_threshold
                whereami
                wander_to "arena"
                check_health
        }
	ring_gong
	check_health
	if { $vitality < $vitality_max || $mana < $mana_max } {
		goto "north plaza"
		send -- "ep$CR"
		deposit_money
                puts "\n"
		start_timer 15
		check_health
		start_timer 15
	} else {
		start_timer 5
	}
	goto "arena"
}

expect eof
